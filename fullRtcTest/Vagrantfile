# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(2) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  config.vm.box = "ubuntu/trusty64"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  config.vm.network "private_network", ip: "192.168.33.10"

  # Forward the RTC port and the Java Debugging port to the host (Windows/Mac) so that you can
  #  connect easily on the usual port numbers. 
  config.vm.network :forwarded_port, guest: 9443, host: 9443  # Default server port
  config.vm.network :forwarded_port, guest: 6080, host: 6080  # Default client VNC port
  config.vm.network :forwarded_port, guest: 8000, host: 8000  # Server debugging port
  config.vm.network :forwarded_port, guest: 8050, host: 8050  # Server OSGi console
  config.vm.network :forwarded_port, guest: 9000, host: 9000  # Server manager (hot swap) port
  config.vm.network :forwarded_port, guest: 2001, host: 2001  # Client OSGi console port
  config.vm.network :forwarded_port, guest: 8099, host: 8099  # Client Java debugging port
  config.vm.network :forwarded_port, guest: 1521, host: 1521  # Oracle connection port
  config.vm.network :forwarded_port, guest: 50000, host: 50000 # DB2 connection port
  # TODO Add ports for the build engine once it is available

  # VirtualBox Specific Customization
  config.vm.provider :virtualbox do |vb|
    #vb.gui = true
    #vb.customize ["modifyvm", :id, "--memory", "8192"]
    #vb.customize ["modifyvm", :id, "--cpus", "4"]
    vb.customize ["modifyvm", :id, "--memory", "4096"]
    vb.customize ["modifyvm", :id, "--cpus", "2"]
  end

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder "..", "/shared"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  config.vm.provision "docker" do |d|
  end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    # There are trusted repositories in IBM for images
    echo DOCKER_OPTS=\\"--insecure-registry drv-rtcdockreg.ottawa.ibm.com:5000 --insecure-registry clmdocker02.ratl.swg.usma.ibm.com:5000\\" | sudo sh -c 'cat >> /etc/default/docker'
    sudo service docker restart

    # Try pulling the trusted images and tag them as standard ones (this may fail, but that's ok)
    docker pull clmdocker02.ratl.swg.usma.ibm.com:5000/ubuntu-desktop-lxde-vnc
    docker pull clmdocker02.ratl.swg.usma.ibm.com:5000/ubuntu:14.04.2
    docker tag clmdocker02.ratl.swg.usma.ibm.com:5000/ubuntu-desktop-lxde-vnc dorowu/ubuntu-desktop-lxde-vnc
    docker tag clmdocker02.ratl.swg.usma.ibm.com:5000/ubuntu:14.04.2 ubuntu:14.04.2

    sudo apt-get -y update && apt-get -y install unzip

    # Copy and run the provisioning script
    cp /vagrant/provision.sh /provision.sh
    chmod a+rx /provision.sh
    /provision.sh
  SHELL
end
